// Copyright 2017 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: test/stream/stream.proto

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamTest_StreamBuffer_FullMethodName = "/test.stream.StreamTest/StreamBuffer"
)

// StreamTestClient is the client API for StreamTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamTestClient interface {
	StreamBuffer(ctx context.Context, in *BufferRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Buffer], error)
}

type streamTestClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamTestClient(cc grpc.ClientConnInterface) StreamTestClient {
	return &streamTestClient{cc}
}

func (c *streamTestClient) StreamBuffer(ctx context.Context, in *BufferRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Buffer], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamTest_ServiceDesc.Streams[0], StreamTest_StreamBuffer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BufferRequest, Buffer]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamTest_StreamBufferClient = grpc.ServerStreamingClient[Buffer]

// StreamTestServer is the server API for StreamTest service.
// All implementations must embed UnimplementedStreamTestServer
// for forward compatibility.
type StreamTestServer interface {
	StreamBuffer(*BufferRequest, grpc.ServerStreamingServer[Buffer]) error
	mustEmbedUnimplementedStreamTestServer()
}

// UnimplementedStreamTestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamTestServer struct{}

func (UnimplementedStreamTestServer) StreamBuffer(*BufferRequest, grpc.ServerStreamingServer[Buffer]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBuffer not implemented")
}
func (UnimplementedStreamTestServer) mustEmbedUnimplementedStreamTestServer() {}
func (UnimplementedStreamTestServer) testEmbeddedByValue()                    {}

// UnsafeStreamTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamTestServer will
// result in compilation errors.
type UnsafeStreamTestServer interface {
	mustEmbedUnimplementedStreamTestServer()
}

func RegisterStreamTestServer(s grpc.ServiceRegistrar, srv StreamTestServer) {
	// If the following call panics, it indicates UnimplementedStreamTestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamTest_ServiceDesc, srv)
}

func _StreamTest_StreamBuffer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BufferRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamTestServer).StreamBuffer(m, &grpc.GenericServerStream[BufferRequest, Buffer]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamTest_StreamBufferServer = grpc.ServerStreamingServer[Buffer]

// StreamTest_ServiceDesc is the grpc.ServiceDesc for StreamTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.stream.StreamTest",
	HandlerType: (*StreamTestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBuffer",
			Handler:       _StreamTest_StreamBuffer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "test/stream/stream.proto",
}
